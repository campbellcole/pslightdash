cmake_minimum_required(VERSION 3.16)
project(pslightdash VERSION 0.1.2)

set(CMAKE_CXX_STANDARD 20)
set(DO_MEMCHECK FALSE)

if (UNIX AND DO_MEMCHECK)
    set(CMAKE_CXX_FLAGS "-fsanitize=address")
endif()

file(GLOB_RECURSE SourceFiles "${CMAKE_CURRENT_LIST_DIR}/src/*")
set(PSLIGHTDASH_INCLUDE "${CMAKE_CURRENT_LIST_DIR}/include/")
add_executable(pslightdash ${SourceFiles})
include_directories(pslightdash ${PSLIGHTDASH_INCLUDE})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

find_package(glfw3 CONFIG REQUIRED)
target_link_libraries(pslightdash PRIVATE glfw)
find_package(glm CONFIG REQUIRED)
target_link_libraries(pslightdash PRIVATE glm::glm)
find_package(freetype CONFIG REQUIRED)
target_link_libraries(pslightdash PRIVATE freetype)
find_package(jsoncpp CONFIG REQUIRED)
if (UNIX)
    target_link_libraries(pslightdash PRIVATE jsoncpp_static jsoncpp_object)
elseif(MSVC)
    target_link_libraries(pslightdash PRIVATE jsoncpp_lib jsoncpp_object)
endif()
find_path(MINIMP3_INCLUDE_DIRS "minimp3/minimp3.h")
target_include_directories(pslightdash PRIVATE ${MINIMP3_INCLUDE_DIRS})
if(APPLE)
    find_library(ACCELERATE Accelerate)
    if (NOT ACCELERATE)
        message(FATAL_ERROR "Accelerate not found")
    endif()
    target_link_libraries(pslightdash PRIVATE ${ACCELERATE})
endif()
find_package(OpenSSL REQUIRED)
target_link_libraries(pslightdash PRIVATE OpenSSL::SSL OpenSSL::Crypto)

add_custom_command(TARGET pslightdash PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_LIST_DIR}/res/ $<TARGET_FILE_DIR:pslightdash>/res/)

configure_file("${CMAKE_CURRENT_LIST_DIR}/include/pslightdashconfig.h.in" "${CMAKE_CURRENT_LIST_DIR}/include/pslightdashconfig.h")

if (MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_compile_options(/FS)
endif ()